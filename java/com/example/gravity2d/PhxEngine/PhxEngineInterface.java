package com.example.gravity2d.PhxEngine;

/**
 * Общий интерфейс для физических движков.
 * Весь жизненный цикл движка делится на временные интервалы. Интервалы могут иметь разную длину.
 * В начале каждого временного интервала вызывается фукция startSimulation().
 * Для симуляции временного интервала вызывается функция simulationCircle()
 * В конце временного интервала вызывается функция relax.
 * Т.е. один интервал можно представить так:
 * prepare(T) -> N * Alive(T/N) -> relax(T)
 * , где T - длительность интервала, а N - сколько раз на протяжении интервала будет вызвана
 * функция Alive()
 * @author ZiminAS
 * @version 1.0
 */
public interface PhxEngineInterface {

    /**
     * Функция вызывается перед началом временного интервала
     * @param interval Длительность предстоящего интервала (в секундах)
     */
    void startSimulation(double interval);

	/**
	 * Данная функция должна изменить текущее состояние модели на состояние,
	 * в котором она будет находится через interval миллисекунд относительно
	 * текущего. При этом, необходимо разбить интервал на несколько подинтервалов для увеличения
     * точность расчётов. Чем больше подинтервалов, тем выше точность, но ниже производительность
	 * @param interval Временной интервал симуляции, выраженный в секундах
     * @param count Количество подинтервалов
	 */
	void simulationCircle(double interval, int count);

    /**
     * Данная функция вызывается в конце временного интервала
     * @param interval Длительность завершённого интервала (в секундах)
     */
    void endSimulation(double interval);
	
}
